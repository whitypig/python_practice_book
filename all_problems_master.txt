Chapter 1

Problem 1: Open a new Python interpreter and use it to find the value of 2 + 3.


Problem 2: How many multiplications are performed when each of the following
lines of code is executed?

print square(5)
print square(2*5)


Problem 3: What will be the output of the following program?

x = 1
def f():
    return x
print x
print f()


Problem 4: What will be the output of the following program?

x = 1
def f():
    x = 2
    return x
print x
print f()
print x


Problem 5: What will be the output of the following program?

x = 1
def f():
        y = x
        x = 2
        return x + y
print x
print f()
print x


Problem 6: What will be the output of the following program?

x = 2
def f(a):
    x = a * a
    return x
y = f(3)
print x, y


Problem 7: Write a function count_digits to find number of digits in the given number.

>>> count_digits(5)
1
>>> count_digits(12345)
5


Problem 8: Write a function istrcmp to compare two strings, ignoring the case.

>>> istrcmp('python', 'Python')
True
>>> istrcmp('LaTeX', 'Latex')
True
>>> istrcmp('a', 'b')
False


Problem 9: What will be output of the following program?

print 2 < 3 and 3 > 1
print 2 < 3 or 3 > 1
print 2 < 3 or not 3 > 1
print 2 < 3 and not 3 > 1


Problem 10: What will be output of the following program?

x = 4
y = 5
p = x < y or x < z
print(p)


Problem 11: What happens when the following code is executed? Will it give any
error? Explain the reasons.

x = 2
if x == 2:
    print(x)
else:
    print(y)


Problem 12: What happens the following code is executed? Will it give any error?
Explain the reasons.

x = 2
if x == 2:
    print(x)
else:
    x +


Problem 13: Write a program add.py that takes 2 numbers as command line
arguments and prints its sum.

$ python add.py 3 5
8
$ python add.py 2 9
11



Chapter 2

Problem 1: What will be the output of the following program?

x = [0, 1, [2]]
x[2][0] = 3
print(x)
x[2].append(4)
print(x)
x[2] = 2
print(x)


Problem 2: Python has a built-in function sum to find sum of all elements of a
list. Provide an implementation for sum.

>>> sum([1, 2, 3])
>>> 6


Problem 3: What happens when the above sum function is called with a list of
strings? Can you make your sum function work for a list of strings as well.

>>> sum(["hello", "world"])
"helloworld"
>>> sum(["aa", "bb", "cc"])
"aabbcc"


Problem 4: Implement a function product, to compute product of a list of
numbers.

>>> product([1, 2, 3])
6


Problem 5: Write a function factorial to compute factorial of a number. Can you
use the product function defined in the previous example to compute factorial?

>>> factorial(4)
24


Problem 6: Write a function reverse to reverse a list. Can you do this without
using list slicing?

>>> reverse([1, 2, 3, 4])
[4, 3, 2, 1]
>>> reverse(reverse([1, 2, 3, 4]))
[1, 2, 3, 4]


Problem 7: Python has built-in functions min and max to compute minimum and
maximum of a given list. Provide an implementation for these functions. What
happens when you call your min and max functions with a list of strings?


Problem 8: Cumulative sum of a list [a, b, c, ...] is defined as [a, a+b, a+b+c,
...]. Write a function cumulative_sum to compute cumulative sum of a list. Does
your implementation work for a list of strings?

>>> cumulative_sum([1, 2, 3, 4])
[1, 3, 6, 10]
>>> cumulative_sum([4, 3, 2, 1])
[4, 7, 9, 10]


Problem 9: Write a function cumulative_product to compute cumulative product of
a list of numbers.

>>> cumulative_product([1, 2, 3, 4])
[1, 2, 6, 24]
>>> cumulative_product([4, 3, 2, 1])
[4, 12, 24, 24]


Problem 10: Write a function unique to find all the unique elements of a list.

>>> unique([1, 2, 1, 3, 2, 5])
[1, 2, 3, 5]


Problem 11: Write a function dups to find all duplicates in the list.

>>> dups([1, 2, 1, 3, 2, 5])
[1, 2]


Problem 12: Write a function group(list, size) that take a list and splits into
smaller lists of given size.

>>> group([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> group([1, 2, 3, 4, 5, 6, 7, 8, 9], 4)
[[1, 2, 3, 4], [5, 6, 7, 8], [9]]


Problem 13: Write a function lensort to sort a list of strings based on length.

>>> lensort(['python', 'perl', 'java', 'c', 'haskell', 'ruby'])
['c', 'perl', 'java', 'ruby', 'python', 'haskell']


Problem 14: Improve the unique function written in previous problems to take an
optional key function as argument and use the return value of the key function
to check for uniqueness.

>>> unique(["python", "java", "Python", "Java"], key=lambda s: s.lower())
["python", "java"]


Problem 15: Reimplement the unique function implemented in the earlier examples
using sets.


Problem 16: Write a function extsort to sort a list of files based on extension.

>>> extsort(['a.c', 'a.py', 'b.py', 'bar.txt', 'foo.txt', 'x.c'])
['a.c', 'x.c', 'a.py', 'b.py', 'bar.txt', 'foo.txt']


Problem 17: Write a program reverse.py to print lines of a file in reverse
order.


Problem 18: Write a program to print each line of a file in reverse order.


Problem 19: Implement unix commands head and tail. The head and tail commands
take a file as argument and prints its first and last 10 lines of the file
respectively.


Problem 20: Implement unix command grep. The grep command takes a string and a
file as arguments and prints all lines in the file which contain the specified
string.


Problem 21: Write a program wrap.py that takes filename and width as aruguments
and wraps the lines longer than width.


Problem 22: The above wrap program is not so nice because it is breaking the
line at middle of any word. Can you write a new program wordwrap.py that works
like wrap.py, but breaks the line only at the word boundaries?


Problem 23: Write a program center_align.py to center align all lines in the
given file.


Problem 24: Provide an implementation for zip function using list
comprehensions.

>>> zip([1, 2, 3], ["a", "b", "c"])
[(1, "a"), (2, "b"), (3, "c")]


Problem 25: Python provides a built-in function map that applies a function to
each element of a list. Provide an implementation for map using list
comprehensions.

>>> def square(x): return x * x
...
>>> map(square, range(5))
[0, 1, 4, 9, 16]


Problem 26: Python provides a built-in function filter(f, a) that returns items
of the list a for which f(item) returns true. Provide an implementation for
filter using list comprehensions.

>>> def even(x): return x %2 == 0
...
>>> filter(even, range(10))
[0, 2, 4, 6, 8]


Problem 27: Write a function triplets that takes a number n as argument and
returns a list of triplets such that sum of first two elements of the triplet
equals the third element using numbers below n. Please note that (a, b, c) and
(b, a, c) represent same triplet.

>>> triplets(5)
[(1, 1, 2), (1, 2, 3), (1, 3, 4), (2, 2, 4)]


Problem 28: Write a function enumerate that takes a list and returns a list of
tuples containing (index,item) for each item in the list.

>>> enumerate(["a", "b", "c"])
[(0, "a"), (1, "b"), (2, "c")]
>>> for index, value in enumerate(["a", "b", "c"]):
...     print(index, value)
0 a
1 b
2 c


Problem 29: Write a function array to create an 2-dimensional array. The
function should take both dimensions as arguments. Value of each element can be
initialized to None:

>>> a = array(2, 3)
>>> a
[[None, None, None], [None, None, None]]
>>> a[0][0] = 5
[[5, None, None], [None, None, None]]


Problem 30: Write a python function parse_csv to parse csv (comma separated
values) files.

>>> print(open('a.csv').read())
a,b,c
1,2,3
2,3,4
3,4,5
>>> parse_csv('a.csv')
[['a', 'b', 'c'], ['1', '2', '3'], ['2', '3', '4'], ['3', '4', '5']]


Problem 31: Generalize the above implementation of csv parser to support any
delimiter and comments.

>>> print(open('a.txt').read())
# elements are separated by ! and comment indicator is #
a!b!c
1!2!3
2!3!4
3!4!5
>>> parse('a.txt', '!', '#')
[['a', 'b', 'c'], ['1', '2', '3'], ['2', '3', '4'], ['3', '4', '5']]


Problem 32: Write a function mutate to compute all words generated by a single
mutation on a given word. A mutation is defined as inserting a character,
deleting a character, replacing a character, or swapping 2 consecutive
characters in a string. For simplicity consider only letters from a to z.

>>> words = mutate('hello')
>>> 'helo' in words
True
>>> 'cello' in words
True
>>> 'helol' in words
True


Problem 33: Write a function nearly_equal to test whether two strings are nearly
equal. Two strings a and b are nearly equal when a can be generated by a single
mutation on b.

>>> nearly_equal('python', 'perl')
False
>>> nearly_equal('perl', 'pearl')
True
>>> nearly_equal('python', 'jython')
True
>>> nearly_equal('man', 'woman')
False


Problem 34: Improve the above program to print the words in the descending order
of the number of occurrences.


Problem 35: Write a program to count frequency of characters in a given file.
Can you use character frequency to tell whether the given file is a Python
program file, C program file or a text file?


Problem 36: Write a program to find anagrams in a given list of words. Two words
are called anagrams if one word can be formed by rearranging letters of another.
For example 'eat', 'ate' and 'tea' are anagrams.

>>> anagrams(['eat', 'ate', 'done', 'tea', 'soup', 'node'])
[['eat', 'ate', 'tea], ['done', 'node'], ['soup']]


Problem 37: Write a function valuesort to sort values of a dictionary based on
the key.

>>> valuesort({'x': 1, 'y': 2, 'a': 3})
[3, 1, 2]


Problem 38: Write a function invertdict to interchange keys and values in a
dictionary. For simplicity, assume that all values are unique.

>>> invertdict({'x': 1, 'y': 2, 'z': 3})
{1: 'x', 2: 'y', 3: 'z'}



Chapter 3

Problem 1: Write a program to list all files in the given directory.


Problem 2: Write a program extcount.py to count number of files for each
extension in the given directory. The program should take a directory name  as
argument and print count and extension for each available file extension.


Problem 3: Write a program to list all the files in the given directory along
with their length and last modification time. The output should contain one line
for each file containing filename, length and modification date separated by
tabs.Hint: see help for os.stat.


Problem 4: Write a program to print directory tree. The program should take path
of a directory as argument and print all the files in it recursively as a tree.


Problem 5: Write a program wget.py to download a given URL. The program should
accept a URL as argument, download it and save it with the basename of the URL.
If the URL ends with a /, consider the basename as index.html.


Problem 6: Write a program antihtml.py that takes a URL as argument, downloads
the html from web and print it after stripping html tags.


Problem 7: Write a function make_slug that takes a name converts it into a slug.
A slug is a string where spaces and special characters are replaced by a hyphen,
typically used to create blog post URL from post title. It should also make sure
there are no more than one hyphen in any place and there are no hyphens at the
biginning and end of the slug.

>>> make_slug("hello world")
'hello-world'
>>> make_slug("hello  world!")
'hello-world'
>>> make_slug(" --hello-  world--")
'hello-world'


Problem 8: Write a program links.py that takes URL of a webpage as argument and
prints all the URLs linked from that webpage.


Problem 9: Write a regular expression to validate a phone number.


Problem 10: Write a program myip.py to print the external IP address of the
machine. Use the response from http://httpbin.org/get and read the IP address
from there. The program should print only the IP address and nothing else.


Problem 11: Write a python program zip.py to create a zip file. The program
should take name of zip file as first argument and files to add as rest of the
arguments.


Problem 12: Write a program mydoc.py to implement the functionality of pydoc.
The program should take the module name as argument and print documentation for
the module and each of the functions defined in that module.


Problem 13: Write a program csv2xls.py that reads a csv file and exports it as
Excel file. The prigram should take two arguments. The name of the csv file to
read as first argument and the name of the Excel file to write as the second
argument.


Problem 14: Create a new virtualenv and install BeautifulSoup. BeautifulSoup is
very good library for parsing HTML. Try using it to extract all HTML links from
a webpage.



Chapter 4

Problem 1: What will the output of the following program.

class A:
    def f(self):
        return self.g()

    def g(self):
        return 'A'

class B(A):
    def g(self):
        return 'B'

a = A()
b = B()
print(a.f(), b.f())
print(a.g(), b.g())


Problem 2: What will be the output of the following program?

try:
    print "a"
except:
    print "b"
else:
    print "c"
finally:
    print "d"


Problem 3: What will be the output of the following program?

try:
    print("a")
    raise Exception("doom")
except:
    print("b")
else:
    print("c")
finally:
    print("d")


Problem 4: What will be the output of the following program?

def f():
    try:
        print("a")
        return
    except:
        print("b")
    else:
        print("c")
    finally:
        print("d")

f()



Chapter 5

Problem 1: Write an iterator class reverse_iter, that takes a list and
iterates it from the reverse direction.

>>> it = reverse_iter([1, 2, 3, 4])
>>> next(it)
4
>>> next(it)
3
>>> next(it)
2
>>> next(it)
1
>>> next(it)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration


Problem 2: Write a program that takes one or more filenames as arguments and
prints all the lines which are longer than 40 characters.


Problem 3: Write a function findfiles that recursively descends the directory
tree for the specified directory and generates paths of all the files in the
tree.


Problem 4: Write a function to compute the number of python files (.py
extension) in a specified directory recursively.


Problem 5: Write a function to compute the total number of lines of code in all
python files in the specified directory recursively.


Problem 6: Write a function to compute the total number of lines of code,
ignoring empty and comment lines, in all python files in the specified directory
recursively.


Problem 7: Write a program split.py, that takes an integer n and a filename as
command line arguments and splits the file into multiple small files with each
having n lines.


Problem 8: Write a function peep, that takes an iterator as argument and
returns the first element and an equivalant iterator.

>>> it = iter(range(5))
>>> x, it1 = peep(it)
>>> print(x, list(it1))
0 [0, 1, 2, 3, 4]


Problem 9: The built-in function enumerate takes an iteratable and returns
an iterator over pairs (index, value) for each value in the source.

>>> list(enumerate(["a", "b", "c"])
[(0, "a"), (1, "b"), (2, "c")]
>>> for i, c in enumerate(["a", "b", "c"]):
...     print(i, c)
...
0 a
1 b
2 c


Problem 10: Implement a function izip that works like itertools.izip.



Chapter 6

Problem 1: Implement a function product to multiply 2 numbers recursively using
+ and - operators only.


Problem 2: Write a function flatten_dict to flatten a nested dictionary
by joining the keys with . character.

>>> flatten_dict({'a': 1, 'b': {'x': 2, 'y': 3}, 'c': 4})
{'a': 1, 'b.x': 2, 'b.y': 3, 'c': 4}


Problem 3: Write a function unflatten_dict to do reverse of flatten_dict.

>>> unflatten_dict({'a': 1, 'b.x': 2, 'b.y': 3, 'c': 4})
{'a': 1, 'b': {'x': 2, 'y': 3}, 'c': 4}


Problem 4: Write a function treemap to map a function over nested list.

>>> treemap(lambda x: x*x, [1, 2, [3, 4, [5]]])
[1, 4, [9, 16, [25]]]


Problem 5: Write a function tree_reverse to reverse elements of a
nested-list recursively.

>>> tree_reverse([[1, 2], [3, [4, 5]], 6])
[6, [[5, 4], 3], [2, 1]]


Problem 6: Complete the above implementation of json_encode by handling the case
of dictionaries.


Problem 7: Implement a program dirtree.py that takes a directory as argument and
prints all the files in that directory recursively as a tree.Hint: Use
os.listdir and os.path.isdir funtions.


Problem 8: Write a function count_change to count the number of ways to
change any given amount. Available coins are also passed as argument to the
function.

>>> count_change(10, [1, 5])
3
>>> count_change(10, [1, 2])
6
>>> count_change(100, [1, 5, 10, 25, 50])
292


Problem 9: Write a function permute to compute all possible permutations
of elements of a given list.

>>> permute([1, 2, 3])
[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]


Problem 10: Write a function profile, which takes a function as argument and
returns a new function, which behaves exactly similar to the given function,
except that it prints the time consumed in executing it.

>>> fib = profile(fib)
>>> fib(20)
time taken: 0.1 sec
10946


Problem 11: Write a function vectorize which takes a function f and return a new
function, which takes a list as argument and calls f for every element and
returns the result as a list.

>>> def square(x): return x * x
...
>>> f = vectorize(square)
>>> f([1, 2, 3])
[1, 4, 9]
>>> g = vectorize(len)
>>> g(["hello", "world"])
[5, 5]
>>> g([[1, 2], [2, 3, 4]])
[2, 3]



